{"version":3,"sources":["module/index.js","index.js"],"names":["eventOptions","supportsPassive","passive","Canvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_resizeHandler","debounce","_updateDimensions","canvas","offsetWidth","offsetHeight","maintainPixelSize","width","height","onResize","window","addEventListener","MutationObserver","mutationObserver","observe","attributes","setTimeout","removeEventListener","disconnect","getContext","contextType","startX","arguments","length","undefined","startY","endX","endY","getImageData","_mount","_unmount","_this2","_this$props","rest","objectWithoutProperties","react_default","a","createElement","assign","ref","c","Component","defaultProps","Demo","draw1","draw2","draw","canvas1","canvas2","context","element","getCanvasElement","centerX","centerY","beginPath","arc","Math","PI","fillStyle","fill","lineWidth","strokeStyle","stroke","className","src_module","id","render","src_Demo","document","getElementById"],"mappings":"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","file":"static/js/main.534c4de4.chunk.js","sourcesContent":["/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport debounce from \"debounce\";\nimport supportsPassive from \"supports-passive\";\n\nconst eventOptions = supportsPassive ? { passive: true } : false;\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n\n    this._resizeHandler = debounce(() => this._updateDimensions(), true);\n  }\n\n  _updateDimensions() {\n    const { canvas, props } = this;\n    const { offsetWidth, offsetHeight } = canvas;\n    const { maintainPixelSize } = props;\n\n    if (maintainPixelSize) {\n      canvas.width = offsetWidth;\n      canvas.height = offsetHeight;\n\n      if (props.onResize) {\n        props.onResize(offsetWidth, offsetHeight);\n      }\n    }\n  }\n\n  _mount() {\n    const { canvas, props } = this;\n\n    window.addEventListener(\"resize\", this._resizeHandler, eventOptions);\n    canvas.addEventListener(\"resize\", this._resizeHandler, eventOptions);\n\n    if (window.MutationObserver) {\n      this.mutationObserver = new window.MutationObserver(this._resizeHandler);\n      this.mutationObserver.observe(canvas, { attributes: true });\n    }\n\n    setTimeout(() => {\n      const { offsetWidth, offsetHeight } = canvas;\n\n      canvas.width = offsetWidth;\n      canvas.height = offsetHeight;\n\n      if (props.onResize) {\n        props.onResize(offsetWidth, offsetHeight);\n      }\n    });\n  }\n\n  _unmount() {\n    const { canvas } = this;\n\n    window.removeEventListener(\"resize\", this._resizeHandler);\n    canvas.removeEventListener(\"resize\", this._resizeHandler);\n\n    if (window.MutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n  }\n\n  /** Retrieve the canvas react component. */\n  getCanvasElement() {\n    return this.canvas;\n  }\n\n  /** Get the context of the canvas. */\n  getContext() {\n    return this.canvas.getContext(this.props.contextType);\n  }\n\n  /** Get the image data of the canvas with a give area. */\n  getImageData(\n    startX = 0,\n    startY = 0,\n    endX = this.canvas.width,\n    endY = this.canvas.height\n  ) {\n    return this.getContext().getImageData(startX, startY, endX, endY);\n  }\n\n  componentDidMount() {\n    this._mount();\n  }\n\n  componentWillUnmount() {\n    this._unmount();\n  }\n\n  render() {\n    const { maintainPixelSize, onResize, contextType, ...rest } = this.props;\n    return <canvas ref={c => (this.canvas = c)} {...rest} />;\n  }\n}\n\nCanvas.propTypes = {\n  maintainPixelSize: PropTypes.bool,\n  onResize: PropTypes.func,\n  contextType: PropTypes.string\n};\n\nCanvas.defaultProps = {\n  maintainPixelSize: true,\n  contextType: \"2d\"\n};\n\nexport default Canvas;\n","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\n\nimport Canvas from \"./module\";\n\nimport \"./style.css\";\n\nclass Demo extends Component {\n  componentDidMount() {\n    this.draw1();\n    this.draw2();\n  }\n\n  draw1() {\n    this.draw(this.canvas1);\n  }\n\n  draw2() {\n    this.draw(this.canvas2);\n  }\n\n  draw(canvas) {\n    const context = canvas.getContext();\n    const element = canvas.getCanvasElement();\n    const { width, height } = element;\n\n    const radius = 70;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    context.beginPath();\n    context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    context.fillStyle = \"#00FF00\";\n    context.fill();\n    context.lineWidth = 5;\n    context.strokeStyle = \"#003300\";\n    context.stroke();\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"canvas-wrapper\">\n          <span className=\"title\">Draw once only</span>\n          <Canvas\n            ref={c => (this.canvas1 = c)}\n            id=\"canvas1\"\n            maintainPixelSize={false}\n            onResize={() => this.draw1()}\n          />\n        </div>\n        <div className=\"canvas-wrapper\">\n          <span className=\"title\">Redraw on resize</span>\n          <Canvas\n            ref={c => (this.canvas2 = c)}\n            id=\"canvas2\"\n            onResize={() => this.draw2()}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nrender(<Demo />, document.getElementById(\"root\"));\n"],"sourceRoot":""}